import {MessageEmbed, Permissions, MessageActionRow, MessageSelectMenu, Modal, TextInputComponent} from 'discord.js';
import { QuickDB, MySQLDriver } from 'quick.db';

import FLAGS from '../data/enums/flags.json' assert { type: 'json' };
import TICKET from '../data/configs/ticketConfigs.json' assert { type: 'json' };
import COLOR from '../data/enums/colors.json' assert { type: 'json' };
import DATABASE from '../data/enums/MySQL/profile_database.json' assert { type: 'json' };

const mysql = new MySQLDriver(DATABASE)
await mysql.connect();

const db = new QuickDB({ driver: mysql });



export default {
	name: 'interactionCreate',
	once: false,
	async execute(interaction) {
        if (interaction.constructor.name !== 'ButtonInteraction') return;

        const userDB = db.table(`user_${interaction.user.id}`);

        if (interaction.customId === 'openTicket') {

            await interaction.deferReply({ ephemeral: true }).catch(console.error);

            let guild = interaction.guild;
            let category = guild.channels.cache.get(TICKET.parentOpened);

            const category_channel = await guild.channels.cache.find(c => c.name === `${interaction.user.username}\ÔºÉ${interaction.user.discriminator}`)
            if (category_channel) {
                var embed = new MessageEmbed()
                    .setDescription('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –±–∏–ª–µ—Ç! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ.')
                    .setColor(COLOR.INV);

                return interaction.editReply({ embeds: [embed] })
            }
            
            guild.channels.create(`${interaction.user.username}\ÔºÉ${interaction.user.discriminator}`, {
                type: 'GUILD_TEXT',
                parent: category,
                permissionOverwrites: [
                    {
                        id: interaction.user.id,
                        allow: [Permissions.FLAGS.VIEW_CHANNEL]
                    },
                    {
                        id: interaction.guild.id,
                        deny: [Permissions.FLAGS.VIEW_CHANNEL]
                    },
                    {
                        id: guild.roles.cache.get(TICKET.support),
                        allow: [Permissions.FLAGS.VIEW_CHANNEL, Permissions.FLAGS.SEND_MESSAGES]
                    }
                ]
            }).then(channel => {

                const embed_success = new MessageEmbed()
                    .setDescription(`–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª ${channel}.`)
                    .setColor(COLOR.GREEN)

                interaction.editReply({ embeds: [embed_success] })

                const embed_welcome = new MessageEmbed()
                    .setDescription(`:dove: –í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ **${interaction.guild.name}**! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–ª–æ–∂–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.`)
                    .setColor(COLOR.INV);

                const embed_info = new MessageEmbed()
                    .setDescription(`–ß—Ç–æ–±—ã üîí –∑–∞–∫—Ä—ã—Ç—å, üîì –æ—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å *–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∏–ª–µ—Ç–∞*!`)
                    .setFooter({ text: `–ë–∏–ª–µ—Ç—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!` })
                    .setColor(COLOR.PRIMARY)

                const row = new MessageActionRow()
                    .addComponents(
                        new MessageSelectMenu()
                            .setCustomId('ticketSettings')
                            .setPlaceholder('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–ª–µ—Ç–∞...')
                            .addOptions([
                                {
                                    label: '–ó–∞–∫—Ä—ã—Ç—å',
                                    emoji: 'üîí',
                                    description: '–ó–∞–∫—Ä—ã—Ç—å –±–∏–ª–µ—Ç',
                                    value: 'closeTicket',
                                },
                                {
                                    label: '–û—Ç–∫—Ä—ã—Ç—å',
                                    emoji: 'üîì',
                                    description: '–û—Ç–∫—Ä—ã—Ç—å –±–∏–ª–µ—Ç',
                                    value: 'openTicket',
                                },
                                {
                                    label: '–£–¥–∞–ª–∏—Ç—å',
                                    emoji: 'üóëÔ∏è',
                                    description: '–£–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç',
                                    value: 'deleteTicket',
                                }
                            ])
                    );
                
                    channel.send({ content: `:ping_pong: –ü–∏–Ω–≥–∏: ${interaction.user} ${guild.roles.cache.get(TICKET.support)}\n\‚†Ä`, embeds: [embed_welcome, embed_info], components: [row] }).then((message) => message.pin())
            })
        } else if (interaction.customId === 'sendApplication') {
    
            let status = await userDB.get(`applicationStatus`)
            if (status === null) status = 'reject';
    
            if (status === 'accepted') return;
            if (status === 'pending') return;
    
            const modal = new Modal()
                .setCustomId('applicationRequest')
                .setTitle('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!')
    
            const gameName = new TextInputComponent()
                .setCustomId('gameName')
                .setLabel('–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º')
                .setPlaceholder('–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç...')
                .setRequired(true)
                .setMinLength(3)
                .setMaxLength(20)
                .setStyle('SHORT');
            
            const aboutYou = new TextInputComponent()
                .setCustomId('aboutYou')
                .setLabel('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ')
                .setPlaceholder('–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç...')
                .setRequired(true)
                .setMinLength(15)
                .setStyle('PARAGRAPH');
            
            const yearsOld = new TextInputComponent()
                .setCustomId('yearsOld')
                .setLabel('–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?')
                .setPlaceholder('–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç...')
                .setRequired(true)
                .setMaxLength(2)
                .setStyle('SHORT');
            
            const howFind = new TextInputComponent()
                .setCustomId('howFind')
                .setLabel('–û—Ç–∫—É–¥–∞ –í—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?')
                .setPlaceholder('–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç...')
                .setRequired(true)
                .setMinLength(5)
                .setStyle('PARAGRAPH');
    
            const row_1 = new MessageActionRow().addComponents(gameName);
            const row_2 = new MessageActionRow().addComponents(aboutYou);
            const row_3 = new MessageActionRow().addComponents(yearsOld);
            const row_4 = new MessageActionRow().addComponents(howFind);
    
            modal.addComponents(row_1, row_2, row_3, row_4)
    
            return await interaction.showModal(modal)
        }
	}
};